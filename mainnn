# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

# Importing libraries

from datetime import datetime, date, timedelta
import os
import numpy as np
import pandas as pd




class BondCalculations:
    
    def __innit__(self, face_value,coupon_rate, issue_date, maturity_date, discount_rate,payment_frequency):
       
        self.face_value = face_value
        self.coupon_rate = coupon_rate
        self.issue_date = datetime.strptime(issue_date, '%Y-%m-%d').date()
        self.maturity_date = datetime.strptime(maturity_date, '%Y-%m-%d').date()
        self.discount_rate = discount_rate
        self.payment_frequency = payment_frequency
        self.cd = date.today() if date.today() >= self.issue_date else self.issue_date
        self.payments_per_year = {
            'annually'     : 1,
            'semi-annually': 2,
            'quarterly'    : 4,
            'monthly'      : 12,
            'weekly'       : 52,
            'daily'        : 365
        }
        
     
    def present_value(self, 
                      row: pd.Series) -> np.float:
        """
        This is used in the method "bond_value()" to calculate the present value from future date and amount.
        fd = future date
        fv = future value
        n = no. of years
        t = no. of times compounded in a year
        pv = present value
        """
        fd = row['receivable_date']
        fv = row['receivable_amount']
        n = (fd - self.cd).days / 365
        t = self.payments_per_year[self.payment_frequency]
        pv = fv / ((1 + (self.discount_rate / t)) ** (n * t))
        return pv    
    
    
    
    

    def bond_value(self) -> (pd.DataFrame, np.float):
            
        """
        Summary
        ===========
        Computes future cash flows and the value of the bond (expected selling price).
        
        Returns
        ========
        A tuple with two elements:
            a dataframe: contains all the cash flows
            a float: value of the bond
        
        Calculation
        ===========
        The present value of a bond is: sum of present value (PV) of all future interest payments receivable and present value (PV) of future principal amount receivable.
        The calculation assumes that the coupon payment received is reinvested as they are received.
        """
        no_of_days_btw_payments = (365 / self.payments_per_year[self.payment_frequency])
        no_of_periods = np.floor((self.maturity_date - self.issue_date).days / no_of_days_btw_payments) + 1
        periods = [self.issue_date + timedelta(days = (i * no_of_days_btw_payments)) for i in np.arange(no_of_periods)]
        
        # The maturity date will be last period in the periods list
        
        self.maturity_date = periods[-1]
        
        df = pd.DataFrame({
            'receivable_date'  : periods,
            'receivable_amount': (self.face_value * self.coupon_rate) / self.payments_per_year[self.payment_frequency]
        })
    
        # Keeping only those dates where the coupon payment will be received
        df = df[df['receivable_date'] > self.cd]
    
        # On the maturity date, along with final coupon payment, the principal amount will also be received.
        df.loc[df.index.max(), 'receivable_amount'] += self.face_value
    
        df['present_value'] = df.apply(func = self.present_value, axis = 1)
    
        return df, round(df['present_value'].sum(), 0)
    
    def yield_calculations(self, 
                           current_bond_price: np.float) -> (np.float, np.float):
        """
        Summary
        =======
        Computes current yield and approximated yield to maturity of the bond.
        Current yield
            return earned if held the bond for a year.
        Yield to maturity
            return earned if held the bond till maturity.
        
        Parameters
        ==========
        current_bond_price: a float
            The current market price of the bond.
            Example: If the current market price of the bond is 127.25, then current_bond_price = 127.25
        
        Returns
        =======
        A tuple with two elements:
            a float: current_yield
            a float: approximated yield to maturity
        
        Calculation
        ===========
                          r * F
        Current yield = ---------
                            P
        
                             F - P
                        C + -------
                               n
        Approx. YTM = ------------------
                             F + P
                            -------
                               2
        where:
            r = coupon rate
            F = face value
            P = current bond price
            C = interest received per year
            n = no of years left
        """
        current_yield = (self.coupon_rate * self.face_value) / current_bond_price

        receivable_per_year = self.face_value * self.coupon_rate
        no_of_year_left = (self.maturity_date - self.cd).days / 365
        yield_to_maturity = (receivable_per_year + ((self.face_value - current_bond_price) / no_of_year_left)) / ((self.face_value + current_bond_price) / 2)
        return round(current_yield, 5), round(yield_to_maturity, 5)
    
    
def user_input_and_checks():
    
        
    """
    This function will ask the user to enter the necessary details about the bond.
    It then checks if the entered values are valid.
    If not, it will repeatedly asks until a valid value is given.
        
    Returns
    ========
    a dictionary
    """
    valid_inputs = {'face_value1': None,
                    'coupon_rate1': None,
                    'issue_date1': None,
                    'maturity_date1': None,
                    'discount_rate1': None,
                    'payment_frequency1': None,
                    'current_market_price1': None}
    face_value_valid = -1
    while face_value_valid == -1:
        face_value1 = input('Enter the face value of the bond (e.g. if $100, then type 100): ')
        try:
            valid_inputs['face_value1'] = np.float(face_value1)
            face_value_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass
    issue_date_valid = -1
    while issue_date_valid == -1:
        issue_date1 = input('Enter the bond issue date (e.g. 2021-11-22): ')
        try:
            datetime.strptime(issue_date1, '%Y-%m-%d').date()
            valid_inputs['issue_date1'] = issue_date1
            issue_date_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass
    maturity_date_valid = -1
    while maturity_date_valid == -1:
        maturity_date1 = input('Enter the bond maturity date (e.g. 2022-11-22): ')
        try:
            datetime.strptime(maturity_date1, '%Y-%m-%d').date()
            valid_inputs['maturity_date1'] = maturity_date1
            if datetime.strptime(valid_inputs['maturity_date1'], '%Y-%m-%d') < datetime.strptime(valid_inputs['issue_date1'], '%Y-%m-%d'):
                print('Bond maturity date should not be less than bond issue date !!')
                print('Invalid entry !! Try again !!')
            else:
                maturity_date_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass
    coupon_rate_valid = -1
    while coupon_rate_valid == -1:
        coupon_rate1 = input('Enter the coupon rate (e.g. if 7%, then type 0.07): ')
        try:
            valid_inputs['coupon_rate1'] = np.float(coupon_rate1)
            coupon_rate_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass
    discount_rate_valid = -1
    while discount_rate_valid == -1:
        discount_rate1 = input('Enter the discount rate (e.g. if 6%, then type 0.06): ')
        try:
            valid_inputs['discount_rate1'] = np.float(discount_rate1)
            discount_rate_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass
    payment_frequency_valid = -1
    while payment_frequency_valid == -1:
        payment_frequency1 = input("Enter the coupon payment frequency (options: annually, semi-annually, quarterly, monthly, weekly, daily): ")
        if payment_frequency1 in ['annually', 'semi-annually', 'quarterly', 'monthly', 'weekly', 'daily']:
            valid_inputs['payment_frequency1'] = payment_frequency1
            payment_frequency_valid = 1
        else:
            print('Invalid entry !! Try again !!')
    current_market_price_valid = -1
    while current_market_price_valid == -1:
        current_market_price1 = input("Enter the current market price of the bond (e.g. if $100, type $100): ")
        try:
            valid_inputs['current_market_price1'] = np.float(current_market_price1)
            current_market_price_valid = 1
        except Exception as _:
            print('Invalid entry !! Try again !!')
            pass

    return valid_inputs
    
            
def main():
    user_inputs = user_input_and_checks()
    bc = BondCalculations (
        face_value = user_inputs['face_value1'],
        coupon_rate = user_inputs['coupon_rate1'],
        issue_date = user_inputs['issue_date1'],
        maturity_date = user_inputs['maturity_date1'],
        discount_rate = user_inputs['discount_rate1'],
        payment_frequency = user_inputs['payment_frequency1'])
    cf, bv = bc.bond_value()
    cy, ytm = bc.yield_calculations(current_bond_price = user_inputs['current_market_price'])
    print(cf)
    print(f'Value of the bond is: {bv}')
    print(f'Current Yield is: {cy} or {round(cy * 100, 3)}%')
    print(f'Yield to maturity is: {ytm} or {round(ytm * 100, 3)}%')




if __name__ == '__main__':
    main()
